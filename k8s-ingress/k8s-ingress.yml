apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-service
  annotations:
    kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ngnix.ingress.kubernetes.io/ssl-redirect: 'true'
spec:
  tls:
    - hosts:
        - mstelegrambot.com
        - www.mstelegrambot.com
      secretName: mstelegrambot-com
  rules:
    - host: mstelegrambot.com
      http:
        paths:
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: ms-telegram-bot-cluster-ip-service
                port:
                  number: 8080
#          - path: /api/?(.*)
#            pathType: Prefix
#            backend:
#              service:
#                name: server-cluster-ip-service
#                port:
#                  number: 5000
    - host: www.mstelegrambot.com
      http:
        paths:
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: ms-telegram-bot-cluster-ip-service
                port:
                  number: 8080
#          - path: /api/?(.*)
#            pathType: Prefix
#            backend:
#              service:
#                name: server-cluster-ip-service
#                port:
#                  number: 5000
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: "test@test.com"
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: mstelegrambot-com-tls
spec:
  secretName: mstelegrambot-com
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: mstelegrambot.com
  dnsNames:
    - mstelegrambot.com
    - www.mstelegrambot.com